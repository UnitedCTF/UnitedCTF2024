# Code deployed to Google Cloud Function to check if the user is an admin
import logging
from typing import Any, Dict

import flask
import google.cloud.logging
import requests
from dotenv import load_dotenv

from const import ADMIN_PASSWORD

load_dotenv()

# Configure local logging to output to console
logging.basicConfig(level=logging.INFO)


# Set up Google Cloud Logging client
google_logging_client = google.cloud.logging.Client(project="unitedctf-2024")
google_logging_client.setup_logging()


def is_admin_password(
    user_uuid: str, user_guess_password: str, user_comment: str
) -> bool:
    """Check if the user is an admin."""
    if user_guess_password == ADMIN_PASSWORD:
        logging.info("User provided the correct password")
        return True

    # Add user_uuid to prefix log to ensure each user get their own logs
    logging.info(f"{user_uuid} User comment: {user_comment}")
    logging.error(
        f"{user_uuid} ERROR: Provided password is not the admin_password: {user_guess_password} != {ADMIN_PASSWORD}"
    )
    return False


def get_instance_id():
    """Get the instance ID from the metadata server."""

    metadata_url = "http://metadata.google.internal/computeMetadata/v1/instance/id"
    headers = {"Metadata-Flavor": "Google"}
    response = requests.get(metadata_url, headers=headers)

    if response.status_code == 200:
        return response.text
    else:
        raise Exception("Failed to retrieve instance ID")


def is_admin(request: flask.Request):
    """Cloud Function that checks if the user is an admin."""

    # Extract instance ID to ensure the logs are from the correct instance
    # This is required to ensure each user get their own logs
    instance_id = get_instance_id()

    # Parse the request
    request_json: Dict[str, Any] = request.get_json(silent=True)
    user_comment = request_json.get("user_comment")
    user_guess_password: str = request_json.get("user_guess_password")

    # Extract the user UUID. This is generated by the app at random, cannot be guessed
    user_uuid: str = request_json.get("user_uuid")

    # Check if the required parameters are present
    if user_comment is None or user_guess_password is None or user_uuid is None:
        return flask.abort(401, "Missing required parameters")

    # Check if the user is an admin
    return flask.jsonify(instance_id), (
        200 if is_admin_password(user_uuid, user_guess_password, user_comment) else 401
    )
